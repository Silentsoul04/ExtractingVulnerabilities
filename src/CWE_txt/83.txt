CWE-83: Improper Neutralization of Script in Attributes in a Web Page
Description
The software does not neutralize or incorrectly neutralizes "javascript:" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
                 ChildOf 79 ParentOf 82
Weakness Ordinalities
Primary :
Applicable Platforms
Improper Neutralization of Input During Web Page 152 Generation ('Cross-site Scripting')
Improper Neutralization of Script in Attributes of IMG Tags in 170 a Web Page
                Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Confidentiality Read Application Data
Integrity Execute Unauthorized Code or Commands Availability
Potential Mitigations
Phase: Implementation
Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site.
We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
Phase: Implementation
Strategy = Output Encoding
    172
CWE-83: Improper Neutralization of Script in Attributes in a Web Page
CWE Version 4.2
CWE-83: Improper Neutralization of Script in Attributes in a Web Page
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
Phase: Implementation
With Struts, write all data from form beans with the bean's filter attribute set to true.
Phase: Implementation
Strategy = Attack Surface Reduction
To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
Effectiveness = Defense in Depth
   Observed Examples
Reference
CVE-2001-0520
CVE-2002-1493 CVE-2002-1965 CVE-2002-1495 CVE-2002-1681 CVE-2004-1935 CVE-2005-0945 CVE-2003-1136
Description
Bypass filtering of SCRIPT tags using onload in BODY, href in A, BUTTON, INPUT, and others. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0520
guestbook XSS in STYLE or IMG SRC attributes. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1493
Javascript in onerror attribute of IMG tag.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1965
XSS in web-based email product via onmouseover event.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1495
XSS via script in <P> tag.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1681
Onload, onmouseover, and other events in an e-mail attachment.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1935
Onmouseover and onload events in img, link, and mail tags.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0945
Javascript in onmouseover attribute in e-mail address or URL.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1136
                                     MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
Nature Type ID Name Page
MemberOf 990 SFP Secondary Cluster: Tainted Input to Command 888 1985
                            173
CWE-83: Improper Neutralization of Script in Attributes in a Web Page

Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
CAPEC-ID
Attack Pattern Name
Abstraction : Variant
 
Nature Type ID Name Page
Scope Impact Likelihood
CWE Version 4.2
CWE-84: Improper Neutralization of Encoded URI Schemes in a Web Page
  Taxonomy Mappings
PLOVER
Software Fault Patterns SFP24
Related Attack Patterns
243 XSS Targeting HTML Attributes
244 XSS Targeting URI Placeholders
588 DOM-Based XSS
XSS using Script in Attributes Tainted input to command
