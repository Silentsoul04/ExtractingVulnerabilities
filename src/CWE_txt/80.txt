CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)
Description
This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context- appropriate entities before displaying them to the user.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 79 Improper Neutralization of Input During Web Page 152 Generation ('Cross-site Scripting')
Weakness Ordinalities
Primary :
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Likelihood Of Exploit
High
Common Consequences
Confidentiality Read Application Data
Integrity Execute Unauthorized Code or Commands Availability
Potential Mitigations
Phase: Implementation
Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields,
cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
Phase: Implementation
Strategy = Output Encoding
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks;
             166
CWE-80: Improper Neutralization of Script- Related HTML Tags in a Web Page (Basic XSS)

CWE Version 4.2
CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)
they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component. The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
Phase: Implementation
With Struts, write all data from form beans with the bean's filter attribute set to true.
Phase: Implementation
Strategy = Attack Surface Reduction
To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.
  
Effectiveness = Defense in 

Observed Examples
Reference
CVE-2002-0938 CVE-2002-1495 CVE-2003-1136 CVE-2004-2171
Description
XSS in parameter in a link.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0938
XSS in web-based email product via attachment filenames.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1495
HTML injection in posted message.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1136
XSS not quoted in error page.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2171
              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature Type ID
Name Page
 MemberOf
Taxonomy Mappings
990
SFP Secondary Cluster: Tainted Input to Command
888 1985
      
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Basic XSS

Software Fault Patterns SFP24 Tainted input to command
Related Attack Patterns
18 XSS Targeting Non-Script Elements 32 XSS Through HTTP Query Strings 86 XSS Through HTTP Headers
193 PHP Remote File Inclusion
