CWE-61: UNIX Symbolic Link (Symlink) Following
Description
The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files.
Composite Components
Requires 362 Concurrent Execution using Shared Resource with Improper 795 Synchronization ('Race Condition')
                      110
CWE-61: UNIX Symbolic Link (Symlink) Following
        Nature
Requires Requires Requires
Type ID
340 386 732
CWE Version 4.2
CWE-61: UNIX Symbolic Link (Symlink) Following
Name Page
Generation of Predictable Numbers or Identifiers 754 Symbolic Name not Mapping to Correct Object 846 Incorrect Permission Assignment for Critical Resource 1370
                                      Extended Description
A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
        Nature Type ID
Name Page
Improper Link Resolution Before File Access ('Link 106 Following')
           ChildOf
Weakness Ordinalities
Resultant :
Applicable Platforms
59
     Language : Language-Independent (Prevalence = Undetermined) Alternate Terms
Symlink following :
symlink vulnerability : Likelihood Of Exploit
High
Common Consequences
    Scope
Confidentiality Integrity
Potential Mitigations
Impact
Read Files or Directories Modify Files or Directories
Likelihood
         Phase: Implementation
Symbolic link attacks often occur when a program creates a tmp directory that stores files/ links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.
Phase: Architecture and Design
Strategy = Separation of Privilege
Follow the principle of least privilege when assigning access rights to entities in a software system. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
Observed Examples
 111
CWE-61: UNIX Symbolic Link (Symlink) Following

Reference Description
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
CAPEC-ID
Attack Pattern Name
Weakness ID : 62
Status: Incomplete
CWE Version 4.2
  CVE-1999-1386
CVE-2000-1178
CVE-2004-0217
CVE-2003-0517 CVE-2004-0689 CVE-2005-1879 CVE-2005-1880 CVE-2005-1916 CVE-2000-0972
CVE-2005-0824
Notes
Research Gap
Some versions of Perl follows symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1386
Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1178
Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0217
Symlink attack allows local users to overwrite files. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0517
Possible interesting example
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0689
Second-order symlink vulnerabilities
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1879
Second-order symlink vulnerabilities
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1880
Symlink in Python program
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1916
Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0972
Signal causes a dump that follows symlinks. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0824
                                      Symlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported. "Second- order symlink vulnerabilities" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used. Reference: [Christey2005]
Taxonomy Mappings
PLOVER UNIX symbolic link following
Related Attack Patterns
27 Leveraging Race Conditions via Symbolic Links
References
[REF-493]Steve Christey. "Second-Order Symlink Vulnerabilities". Bugtraq. 2005 June 7. < http:// www.securityfocus.com/archive/1/401682 >.
[REF-494]Shaun Colley. "Crafting Symlinks for Fun and Profit". Infosec Writers Text Library. 2004 April 2. < http://www.infosecwriters.com/texts.php?op=display&id=159 >.
[REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
