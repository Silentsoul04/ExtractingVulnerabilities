CWE-73: External Control of File Name or Path
Description
The software allows user input to control or influence paths or file names that are used in filesystem operations.
Extended Description
This could allow an attacker to access or modify system files or other files that are critical to the application.
Reference Description
CVE-2004-1084 Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in
HFS+.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1084
 
          Weakness ID : 73 Status: Draft Structure : Simple
Abstraction : Base
 Path manipulation errors occur when the following two conditions are met:
 125
CWE-73: External Control of File Name or Path
      Nature
Type ID
Name   Page
               Nature
Nature
Nature
Type ID
Type ID
Type ID
Name   Page
Name   Page
Name   Page
                                        CWE Version 4.2
CWE-73: External Control of File Name or Path
1. An attacker can specify a path used in an operation on the filesystem.
2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.
For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
    ChildOf
ChildOf ParentOf CanPrecede
CanPrecede CanPrecede
CanPrecede CanPrecede
610 Externally Controlled Reference to a Resource in Another 1216 Sphere
642 External Control of Critical State Data 1260 114 Process Control 257 22 Improper Limitation of a Pathname to a Restricted Directory 31
('Path Traversal')
41 Improper Resolution of Path Equivalence 81 59 Improper Link Resolution Before File Access ('Link 106
Following')
98 Improper Control of Filename for Include/Require Statement 218
in PHP Program ('PHP Remote File Inclusion')
434 Unrestricted Upload of File with Dangerous Type 938
                                                                                  Relevant to the view "Architectural Concepts" (CWE-1008)
MemberOf 1015 Limit Access 2002
Relevant to the view "Software Development" (CWE-699)
MemberOf 399 Resource Management Errors 1896
Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
ChildOf 20 Improper Input Validation 19
Weakness Ordinalities
Primary :
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Operating_System : Unix (Prevalence = Often) Operating_System : Windows (Prevalence = Often) Operating_System : macOS (Prevalence = Often)
Likelihood Of Exploit
High
Common Consequences
                      126
CWE-73: External Control of File Name or Path

Detection Methods
Automated Static Analysis
The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software. Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.
Potential Mitigations
Phase: Architecture and Design
When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID
1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.
Phase: Architecture and Design Phase: Operation
Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory. Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection. This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.
Phase: Architecture and Design
For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
Phase: Implementation
Strategy = Input Validation
CWE Version 4.2
CWE-73: External Control of File Name or Path
     Scope Impact   Likelihood
        Integrity Read Files or Directories Confidentiality Modify Files or Directories
The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.
        Integrity Confidentiality Availability
Modify Files or Directories
Execute Unauthorized Code or Commands
The application can operate on unexpected files. This
may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.
        Availability
DoS: Crash, Exit, or Restart
DoS: Resource Consumption (Other)
The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.
     127
CWE-73: External Control of File Name or Path

CWE Version 4.2
CWE-73: External Control of File Name or Path
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing
input validation, consider all potentially relevant properties, including length, type of input, the
full range of acceptable values, missing or extra inputs, syntax, consistency across related
fields, and conformance to business rules. As an example of business rule logic, "boat" may
be syntactically valid because it only contains alphanumeric characters, but it is not valid if
the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a list of allowable file extensions, which will help
to avoid CWE-434. Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
Phase: Implementation
Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).
Phase: Installation Phase: Operation
Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.
Phase: Operation Phase: Implementation
If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary
of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
Phase: Testing
Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.
Phase: Testing
Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Phase: Testing
Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.
   CWE-73: External Control of File Name or Path
 128

CWE Version 4.2
CWE-73: External Control of File Name or Path
These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.

Observed Examples
Reference
CVE-2008-5748
CVE-2008-5764
Description
(bad)
Chain: external control of values for user's desired language and theme enables path traversal. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748
Chain: external control of user's target language enables remote file inclusion. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5764
      MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature
MemberOf
MemberOf MemberOf
MemberOf
Notes
Relationship
Type ID
723
752 877
981
Name Page
 OWASP Top Ten 2004 Category A2 - Broken Access Control
2009 Top 25 - Risky Resource Management
CERT C++ Secure Coding Section 09 - Input Output (FIO)
SFP Secondary Cluster: Path Traversal
711 1907
750 1925 868 1950
888 1981
                                             The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc. However, those weaknesses do not always require external control. For
 129
CWE-73: External Control of File Name or Path
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
CAPEC-ID
Attack Pattern Name
  Weakness ID : 74 Status: Incomplete Structure : Simple
Abstraction : Class
 CWE Version 4.2
CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')
example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all. The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that
the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify
an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.
Taxonomy Mappings
7 Pernicious Kingdoms Path Manipulation Software Fault Patterns SFP16 Path Traversal
Related Attack Patterns
13 Subverting Environment Variable Values
64 Using Slashes and URL Encoding Combined to Bypass Validation Logic 72 URL Encoding
76 Manipulating Web Input to File System Calls
78 Using Escaped Slashes in Alternate Encoding
79 Using Slashes in Alternate Encoding
80 Using UTF-8 Encoding to Bypass Validation Logic
267 Leverage Alternate Encoding
References
[REF-6]Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and Metrics. 2005 November 7. NIST. < https://samate.nist.gov/SSATTM_Content/ papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security %20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf >.
[REF-45]OWASP. "OWASP Enterprise Security API (ESAPI) Project". < http://www.owasp.org/ index.php/ESAPI >.