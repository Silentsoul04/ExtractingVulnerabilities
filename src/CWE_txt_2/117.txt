CWE-117: Improper Output Neutralization for Logs
Description
The software does not neutralize or incorrectly neutralizes output that is written to logs.
Extended Description
This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when:
   Weakness ID : 117 Status: Draft Structure : Simple
Abstraction : Base
 1. Data enters an application from an untrusted source.
 267
CWE-117: Improper Output Neutralization for Logs
       Nature
Nature
Nature
Nature
Type ID Name
Type ID Name
Type ID Name
Type ID Name
Page
Page
Page
Page
                                                              Scope
Impact
Likelihood
      CWE Version 4.2
CWE-117: Improper Output Neutralization for Logs
2. The data is written to an application or system log file.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 116 Improper Encoding or Escaping of Output 260 CanFollow 93 Improper Neutralization of CRLF Sequences ('CRLF 202
Injection')
Relevant to the view "Architectural Concepts" (CWE-1008)
MemberOf 1009 Audit 1995
Relevant to the view "Software Development" (CWE-699)
MemberOf 1210 Audit / Logging Errors 2045 MemberOf 137 Data Neutralization Issues 1883
Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
ChildOf 20 Improper Input Validation 19
Weakness Ordinalities
Primary :
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Background Details
Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.
Likelihood Of Exploit
Medium
Common Consequences
                                                      Integrity Confidentiality Availability Non-Repudiation
Modify Application Data
Hide Activities
Execute Unauthorized Code or Commands
Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to
 268
CWE-117: Improper Output Neutralization for Logs

CWE Version 4.2
CWE-117: Improper Output Neutralization for Logs
  
Scope Impact   Likelihood
implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.
Potential Mitigations
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Observed Examples
CVE-2006-4624 Chain: inject fake log entries with fake timestamps using CRLF injection https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4624
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
     MemberOf
MemberOf
MemberOf
MemberOf 1134
Taxonomy Mappings
7 Pernicious Kingdoms Software Fault Patterns The CERT Oracle Secure Coding Standard for Java (2011)
SEI CERT Oracle Coding Standard for Java
Related Attack Patterns
OWASP Top Ten 2004 Category A6 - Injection Flaws CWE Cross-section
SFP Secondary Cluster: Exposed Data
SEI CERT Oracle Secure Coding Standard for Java - Guidelines 00. Input Validation and Data Sanitization (IDS)
711 1910 884 2070 888 1973 1133 2015
727 884 963
                                                     SFP23 IDS03-J
IDS03-J
Exact
Exact
Log Forging
Exposed Data
Do not log unsanitized user input
Do not log unsanitized user input
                    81 Web Logs Tampering
93 Log Injection-Tampering-Forging 268 Audit Log Manipulation
References
          [REF-6]Katrina Tsipenyuk, Brian Chess and Gary McGraw. "Seven Pernicious Kingdoms: A Taxonomy of Software Security Errors". NIST Workshop on Software Security Assurance Tools Techniques and Metrics. 2005 November 7. NIST. < https://samate.nist.gov/SSATTM_Content/ papers/Seven%20Pernicious%20Kingdoms%20-%20Taxonomy%20of%20Sw%20Security %20Errors%20-%20Tsipenyuk%20-%20Chess%20-%20McGraw.pdf >.