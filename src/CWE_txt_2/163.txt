CWE-163: Improper Neutralization of Multiple Trailing Special Elements
Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.
Extended Description
As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to
     Weakness ID : 163 Status: Incomplete Structure : Simple
Abstraction : Variant
  387
CWE-163: Improper Neutralization of Multiple Trailing Special Elements
      Nature Type ID Name Page
Scope Impact Likelihood
                     CWE Version 4.2
CWE-163: Improper Neutralization of Multiple Trailing Special Elements
similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
    ChildOf ParentOf ParentOf
Applicable Platforms
162 Improper Neutralization of Trailing Special Elements 386 43 Path Equivalence: 'filename....' (Multiple Trailing Dot) 88 52 Path Equivalence: '/multiple/trailing/slash//' 97
                           Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Integrity Unexpected State
Potential Mitigations
Developers should anticipate that multiple trailing special elements will be injected/removed/ manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
MemberOf Relationships
    388
CWE-163: Improper Neutralization of Multiple Trailing Special Elements

CWE Version 4.2
CWE-164: Improper Neutralization of Internal Special Elements
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
  
 Nature Type ID
Name Page
SFP Secondary Cluster: Tainted Input to Command 888 1985
Multiple Trailing Special Elements SFP24 Tainted input to command
 MemberOf
Taxonomy Mappings
990
      
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Software Fault Patterns
            