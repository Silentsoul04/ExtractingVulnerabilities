CWE-116: Improper Encoding or Escaping of Output
Description
The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.
Extended Description
Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.
Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, "GET /index.html HTTP/1.1" is
a structured message containing a command ("GET") with a single argument ("/index.html") and metadata about which protocol version is being used ("HTTP/1.1").
If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
  Description
 
Nature
ChildOf ParentOf ParentOf
ParentOf CanPrecede
Type ID
707 117 644
838 74
Name Page
Improper Neutralization 1365 Improper Output Neutralization for Logs 267
Improper Neutralization of HTTP Headers for Scripting 1268 Syntax
Inappropriate Encoding for Output Context 1554 Improper Neutralization of Special Elements in Output Used 130 by a Downstream Component ('Injection')
                                                  Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
Nature Type ID Name Page
  
 ParentOf
Applicable Platforms
Language : Language-Independent (Prevalence = Often) Technology : Database Server (Prevalence = Often) Technology : Web Server (Prevalence = Often)
Alternate Terms
Output Sanitization : Output Validation : Output Encoding :
Likelihood Of Exploit
838 Inappropriate Encoding for Output Context 1554
     High
 261
CWE-116: Improper Encoding or Escaping of Output
   Scope Impact   Likelihood
        Integrity Modify Application Data
The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
        Integrity Confidentiality Availability Access Control
Execute Unauthorized Code or Commands
The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
        Confidentiality Bypass Protection Mechanism
The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.
    CWE Version 4.2
CWE-116: Improper Encoding or Escaping of Output
Common Consequences
  Detection Methods
Automated Static Analysis
This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.
Effectiveness = Moderate
This is not a perfect solution, since 100% accuracy and coverage are not feasible.
Automated Dynamic Analysis
This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Potential Mitigations
Phase: Architecture and Design
Strategy = Libraries or Frameworks
Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, consider using the
ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.
Phase: Architecture and Design
Strategy = Parameterization
If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.
Phase: Architecture and Design Phase: Implementation
 262
CWE-116: Improper Encoding or Escaping of Output

CWE Version 4.2
CWE-116: Improper Encoding or Escaping of Output
Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
Phase: Architecture and Design
In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.
Phase: Architecture and Design
Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).
Phase: Requirements
Fully specify which encodings are required by components that will be communicating with each other.
Phase: Implementation
When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.
Observed Examples
Reference Description
CVE-2008-4636 OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be
changed.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4636
CVE-2008-0769 Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected
encoding.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0769
CVE-2008-0005
CVE-2008-5573 CVE-2008-3773
CVE-2008-0757
Program does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0005
SQL injection via password parameter; a strong password might contain "&" https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5573
Cross-site scripting in chat application via a message subject, which normally might contain "&" and other XSS-related characters. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3773
Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0757
              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 265
CWE-116: Improper Encoding or Escaping of Output
      Nature Type ID Name     Page
             CWE Version 4.2
CWE-116: Improper Encoding or Escaping of Output
   MemberOf MemberOf
MemberOf
MemberOf MemberOf
MemberOf
Notes
Relationship
751 2009 Top 25 - Insecure Interaction Between Components
845 The CERT Oracle Secure Coding Standard for Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS)
883 CERT C++ Secure Coding Section 49 - Miscellaneous (MSC)
992 SFP Secondary Cluster: Faulty Input Transformation 1003 Weaknesses for Simplified Mapping of Published
Vulnerabilities
1134 SEI CERT Oracle Secure Coding Standard for Java -
Guidelines 00. Input Validation and Data Sanitization (IDS)
750 1925 844 1934
868 1953
888 1988 1003 2079
1133 2015
                                                                       This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages.
Relationship
CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric
ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks. However, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name "O'Reilly" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into
the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.
Terminology
The usage of the "encoding" and "escaping" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the "escape" JavaScript function whose purpose is stated to be encoding. Of course, the concepts of encoding and escaping predate the Web by decades. Given such a context, it
is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency.
Theoretical
This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere.
Research Gap
While many published vulnerabilities are related to insufficient output encoding, there is such
an emphasis on input validation as a protection mechanism that the underlying causes are
rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques.
Taxonomy Mappings
 266
CWE-116: Improper Encoding or Escaping of Output

  
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
WASC
The CERT Oracle Secure Coding Standard for Java (2011)
The CERT Oracle Secure Coding Standard for Java (2011)
SEI CERT Oracle Coding Standard for Java
SEI CERT Perl Coding Standard
Related Attack Patterns
CWE Version 4.2
CWE-117: Improper Output Neutralization for Logs
Improper Output Handling
Sanitize untrusted data passed across a trust boundary
Use a subset of ASCII for file and path names
Prevent SQL injection
Sanitize untrusted data passed across a trust boundary
22
IDS00-J Exact
IDS05-J
IDS00-J Imprecise
IDS33- Exact PL
                        
            
CAPEC-ID
Attack Pattern Name
73 User-Controlled Filename 81 Web Logs Tampering
85 AJAX Fingerprinting
104 Cross Zone Scripting
References
              [REF-45]OWASP. "OWASP Enterprise Security API (ESAPI) Project". < http://www.owasp.org/ index.php/ESAPI >.
[REF-46]Joshbw. "Output Sanitization". 2008 September 8. < http://www.analyticalengine.net/ archives/58 >.
[REF-47]Niyaz PK. "Sanitizing user data: How and where to do it". 2008 September 1. < http:// www.diovo.com/2008/09/sanitizing-user-data-how-and-where-to-do-it/ >.
[REF-48]Jeremiah Grossman. "Input validation or output filtering, which is better?". 2007 January 0. < http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html >.
[REF-49]Jim Manico. "Input Validation - Not That Important". 2008 August 0. < http:// manicode.blogspot.com/2008/08/input-validation-not-that-important.html >.
[REF-50]Michael Eddington. "Preventing XSS with Correct Output Encoding". < http:// phed.org/2008/05/19/preventing-xss-with-correct-output-encoding/ >.
[REF-7]Michael Howard and David LeBlanc. "Writing Secure Code". 2nd Edition. 2002 December 4. Microsoft Press. < https://www.microsoftpressstore.com/store/writing-secure- code-9780735617223 >.