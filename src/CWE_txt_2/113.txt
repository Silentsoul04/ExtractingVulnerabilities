CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')
Description
The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.
Extended Description
Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross- site scripting and cache poisoning attacks.
HTTP response splitting weaknesses may be present when:
1. Data enters a web application through an untrusted source, most frequently an HTTP request.
2. The data is included in an HTTP response header sent to a web user without being validated for malicious characters.
Relationships
  252
CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')
CWE Version 4.2
CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
   
Nature
ChildOf CanPrecede
Type ID
93 79
Name Page
Improper Neutralization of CRLF Sequences ('CRLF 202 Injection')
Improper Neutralization of Input During Web Page 152 Generation ('Cross-site Scripting')
 
                Relevant to the view "Seven Pernicious Kingdoms" (CWE-700)
Nature Type ID Name Page
 
 ChildOf
Applicable Platforms
20 Improper Input Validation 19
     Language : Language-Independent (Prevalence = Undetermined)
Technology : Web Based (Prevalence = Undetermined) Common Consequences
Scope Impact   Likelihood
Integrity Access Control
Modify Application Data
Gain Privileges or Assume Identity
CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of
the response the application intends to send, as well as allowing them to create additional responses entirely under their control.
Potential Mitigations
Phase: Implementation
Strategy = Input Validation
Construct HTTP headers very carefully, avoiding the use of non-validated input data.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Example 2:
An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the sever.
Cross-User Defacement
This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server.
• In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application.
• In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.
Example 3:
The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user.
Cache Poisoning
If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected.
Example 4:
Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users.
Cross-Site Scripting
Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.
The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.
The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.
Example 5:
In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead.
  
Page Hijacking
By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.
  Observed Examples
CVE-2004-2146 CVE-2004-1620 CVE-2004-1656 CVE-2005-2060 CVE-2005-2065 CVE-2004-2512 CVE-2005-1951
CVE-2004-1687
Application accepts CRLF in an object ID, allowing HTTP response splitting.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2146
HTTP response splitting via CRLF in parameter related to URL.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1620
HTTP response splitting via CRLF in parameter related to URL.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1656
Bulletin board allows response splitting via CRLF in parameter.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2060
Bulletin board allows response splitting via CRLF in parameter.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2065
Response splitting via CRLF in PHPSESSID.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2512
Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1951
Chain: HTTP response splitting via CRLF in parameter related to URL. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1687
                              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
MemberOf 884 CWE Cross-section 884 2070 MemberOf 990 SFP Secondary Cluster: Tainted Input to Command 888 1985
Notes
Theoretical
HTTP response splitting is probably only multi-factor in an environment that uses intermediaries.
                    Taxonomy Mappings
PLOVER
7 Pernicious Kingdoms
WASC 25 Software Fault Patterns SFP24
Related Attack Patterns
HTTP response splitting HTTP Response Splitting HTTP Response Splitting Tainted input to command
                            31 Accessing/Intercepting/Modifying HTTP Cookies 34 HTTP Response Splitting
       256
CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')
CWE Version 4.2
CWE-114: Process Control
  
CAPEC-ID
Attack Pattern Name
85 AJAX Fingerprinting
References
  [REF-43]OWASP. "OWASP TOP 10". < http://www.owasp.org/index.php/Top_10_2007 >.
[REF-44]Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". McGraw-Hill. 2010.