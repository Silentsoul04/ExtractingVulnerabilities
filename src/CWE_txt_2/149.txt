CWE-149: Improper Neutralization of Quoting Syntax
Description
Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 138 Improper Neutralization of Special Elements 343
Common Consequences
Integrity Unexpected State
Potential Mitigations
Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Phase: Implementation 362
             CWE-149: Improper Neutralization of Quoting Syntax
CWE Version 4.2
CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Observed Examples
CVE-2003-1016 MIE. MFV too? bypass AV/security with fields that should not be quoted, duplicate quotes, missing leading/trailing quotes.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1016
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
  
Reference Description
CVE-2004-0956 Database allows remote attackers to cause a denial of service (application crash) via a MATCH AGAINST query with an opening double quote but no
closing double quote.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0956
  
 Nature Type ID
Name Page
 MemberOf
Taxonomy Mappings
990
SFP Secondary Cluster: Tainted Input to Command
Quoting Element
SFP24 Tainted input to command
888 1985
      
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Software Fault Patterns
Related Attack Patterns
            
CAPEC-ID
Attack Pattern Name
468 Generic Cross-Browser Cross-Domain Theft
   