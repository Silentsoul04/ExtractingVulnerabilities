CWE-166: Improper Handling of Missing Special Element
Description
The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 703 Improper Check or Handling of Exceptional Conditions 1358 ChildOf 159 Improper Handling of Invalid Use of Special Elements 381
Relevant to the view "Software Development" (CWE-699)
MemberOf 19 Data Processing Errors 1882
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Availability DoS: Crash, Exit, or Restart
Potential Mitigations
Developers should anticipate that special elements will be removed in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
                             392
CWE-166: Improper Handling of Missing Special Element
CWE Version 4.2
CWE-167: Improper Handling of Additional Special Element
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
  
Observed Examples
Reference
CVE-2002-1362 CVE-2002-0729 CVE-2002-1532
Description
Crash via message type without separator character
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1362
Missing special character (separator) causes crash
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0729
HTTP GET without \r\n\r\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1532
          MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature
MemberOf MemberOf
Taxonomy Mappings
PLOVER
Type ID
Name Page
 722 OWASP Top Ten 2004 Category A1 - Unvalidated Input 711 1907 992 SFP Secondary Cluster: Faulty Input Transformation 888 1988
Missing Special Element