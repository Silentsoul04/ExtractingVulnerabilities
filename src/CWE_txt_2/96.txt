CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')
Weakness ID: 96
Abstraction: Base
Structure: Simple	
Status: Draft
Presentation Filter:  
+ Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.
+ Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.
+ Relevant to the view "Research Concepts" (CWE-1000)
Nature	Type	ID	Name
ChildOf	Base	94	Improper Control of Generation of Code ('Code Injection')
ParentOf	Variant	97	Improper Neutralization of Server-Side Includes (SSI) Within a Web Page
+ Relevant to the view "Software Development" (CWE-699)
Nature	Type	ID	Name
MemberOf	Category	137	Data Neutralization Issues
+ Relevant to the view "Architectural Concepts" (CWE-1008)
+ Modes Of Introduction
The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase.

Phase	Note
Architecture and Design	This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely.
Implementation	REALIZATION: This weakness is caused during implementation of an architectural security tactic.
+ Applicable Platforms
The listings below show possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.
Languages
PHP (Undetermined Prevalence)
Perl (Undetermined Prevalence)
Class: Interpreted (Undetermined Prevalence)
+ Common Consequences
The table below specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact.

Scope	Impact	Likelihood
Confidentiality
Technical Impact: Read Files or Directories; Read Application Data

The injected code could access restricted data / files.
Access Control
Technical Impact: Bypass Protection Mechanism

In some cases, injectable code controls authentication; this may lead to a remote vulnerability.
Access Control
Technical Impact: Gain Privileges or Assume Identity

Injected code can access resources that the attacker is directly prevented from accessing.
Integrity
Confidentiality
Availability
Other
Technical Impact: Execute Unauthorized Code or Commands

Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.
Non-Repudiation
Technical Impact: Hide Activities

Often the actions performed by injected control code are unlogged.
Observed Examples
Reference	Description
CVE-2002-0495
Perl code directly injected into CGI library file from parameters to another CGI program.
CVE-2005-1876
Direct PHP code injection into supporting template file.
CVE-2005-1894
Direct code injection into PHP script that can be accessed by attacker.
CVE-2003-0395
PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.
CVE-2007-6652
chain: execution after redirect allows non-administrator to perform static code injection.
+ Potential Mitigations
Phase: Implementation
Strategy: Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy: Output Encoding
Perform proper output validation and escaping to neutralize all code syntax from data written to code files.
+ Weakness Ordinalities
Ordinality	Description
Primary
(where the weakness exists independent of other weaknesses)
+ Affected Resources
File or Directory
+ Memberships
This MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
Nature	Type	ID	Name
MemberOf	View	884	CWE Cross-section
+ Notes
Relationship
"HTML injection" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.
+ Taxonomy Mappings
Mapped Taxonomy Name	Node ID	Fit	Mapped Node Name
PLOVER			Direct Static Code Injection
+ Related Attack Patterns
CAPEC-ID	Attack Pattern Name
CAPEC-35	Leverage Executable Code in Non-Executable Files
CAPEC-73	User-Controlled Filename
CAPEC-77	Manipulating User-Controlled Variables
CAPEC-81	Web Logs Tampering
CAPEC-85	AJAX Fingerprinting
+ Content History
+ Submissions
Submission Date	Submitter	Organization
2006-07-19	PLOVER	
+ Modifications
+ Previous Entry Names