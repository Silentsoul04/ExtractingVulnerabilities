CWE-159: Improper Handling of Invalid Use of Special Elements
Description
The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
  
CAPEC-ID
Attack Pattern Name
       
  Weakness ID : 159 Status: Draft Structure : Simple
Abstraction : Class
  
Nature Type ID
ChildOf 138 ParentOf 166 ParentOf 167 ParentOf 168
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Scope Impact
Integrity Unexpected State
Potential Mitigations
Name Page
Improper Neutralization of Special Elements 343 Improper Handling of Missing Special Element 392 Improper Handling of Additional Special Element 393 Improper Handling of Inconsistent Special Elements 395
                                       
Likelihood
   Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if
 381
CWE-159: Improper Handling of Invalid Use of Special Elements
Nature Type ID Name     Page
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
  Weakness ID : 160 Status: Incomplete Structure : Simple
CWE Version 4.2
CWE-160: Improper Neutralization of Leading Special Elements
the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
   MemberOf 990 SFP Secondary Cluster: Tainted Input to Command
Notes
Maintenance
The list of children for this entry is far from complete.
Terminology
888 1985
      Precise terminology for the underlying weaknesses does not exist. Therefore, these weaknesses use the terminology associated with the manipulation.
Research Gap
Customized languages and grammars, even those that are specific to a particular product,
are potential sources of weaknesses that are related to special elements. However, most researchers concentrate on the most commonly used representations for data transmission,
such as HTML and SQL. Any representation that is commonly used is likely to be a rich source of weaknesses; researchers are encouraged to investigate previously unexplored representations.
Taxonomy Mappings
PLOVER Common Special Element Manipulations
Software Fault Patterns SFP24 Tainted input to command