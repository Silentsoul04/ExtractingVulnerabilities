CWE-129: Improper Validation of Array Index
Description
The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
     Weakness ID : 129 Status: Draft Structure : Simple
Abstraction : Variant
  
Nature
ChildOf
CanPrecede
CanPrecede CanPrecede
Type ID
1285
119
789 823
Name Page
Improper Validation of Specified Index, Position, or Offset in 1845 Input
Improper Restriction of Operations within the Bounds of a 272 Memory Buffer
Uncontrolled Memory Allocation 1477 Use of Out-of-range Pointer Offset 1521
                                       Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
Nature Type ID Name Page
ChildOf 20 Improper Input Validation 19
Relevant to the view "Software Development" (CWE-699)
  
        313
CWE-129: Improper Validation of Array Index
Nature Type ID Name   Page
Scope Impact   Likelihood
Integrity Availability
DoS: Crash, Exit, or Restart
Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area.
Integrity Modify Memory
If the memory corrupted is data, rather than instructions, the system will continue to function with improper values.
Confidentiality Integrity
Modify Memory Read Memory
Use of an index that is outside the bounds of an array
can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., "buffer overflows" are not always the result. This may result in the exposure or modification of sensitive data.
Integrity Confidentiality Availability
Execute Unauthorized Code or Commands
If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled.
Integrity Availability Confidentiality
DoS: Crash, Exit, or Restart
Execute Unauthorized Code or Commands Read Memory
Modify Memory
A single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed
CWE Version 4.2
CWE-129: Improper Validation of Array Index
MemberOf 1215 Data Validation Issues 2048
Weakness Ordinalities
Resultant : The most common condition situation leading to an out-of-bounds array index is the use of loop index variables as buffer indexes. If the end condition for the loop is subject to a flaw, the index can grow or shrink unbounded, therefore causing a buffer overflow or underflow. Another common situation leading to this condition is the use of a function's return value, or the resulting value of a calculation directly as an index in to a buffer.
Applicable Platforms
Language : C (Prevalence = Often)
Language : C++ (Prevalence = Often)
Language : Language-Independent (Prevalence = Undetermined)
Alternate Terms
out-of-bounds array index : index-out-of-range :
array index underflow :
Likelihood Of Exploit
High
Common Consequences
Scope
Impact
out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.
Likelihood
  Detection Methods
Automated Static Analysis
This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. Automated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report array index errors that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.
Effectiveness = High
This is not a perfect solution, since 100% accuracy and coverage are not feasible.
Automated Dynamic Analysis
This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.
Black Box
Black box methods might not get the needed code coverage within limited time constraints, and a dynamic test might not produce any noticeable side effects even if it is successful.
Potential Mitigations
Phase: Architecture and Design
Strategy = Input Validation
Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).
Phase: Architecture and Design
For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. Even though client-side checks provide minimal benefits with respect to server- side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
Phase: Requirements
Strategy = Language Selection
Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.
Phase: Operation
 315
CWE-129: Improper Validation of Array Index
CWE Version 4.2
CWE-129: Improper Validation of Array Index
Strategy = Environment Hardening
Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position- Independent Executables (PIE) [REF-64].
Effectiveness = Defense in Depth
This is not a complete solution. However, it forces the attacker to guess an unknown value that changes every program execution. In addition, an attack could still cause a denial of service, since the typical response is to exit the application.
Phase: Operation
Strategy = Environment Hardening
Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].
Effectiveness = Defense in Depth
This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.
Phase: Implementation
Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations
of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.
Phase: Architecture and Design Phase: Operation
Strategy = Environment Hardening
Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a
   CWE-129: Improper Validation of Array Index
 316

CWE Version 4.2
CWE-129: Improper Validation of Array Index
single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
Phase: Architecture and Design Phase: Operation
Strategy = Sandbox or Jail
Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. This may not be a feasible solution, and it
only limits the impact to the operating system; the rest of the application may still be subject to compromise. Be careful to avoid CWE-243 and other weaknesses related to jails.
Effectiveness = Limited
The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.
Observed Examples
CVE-2005-0369 CVE-2001-1009 CVE-2003-0721 CVE-2004-1189
CVE-2007-5756
CVE-2005-2456
Affected Resources
• Memory
large ID in packet used as array index
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0369
negative array index as argument to POP LIST command
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1009
Integer signedness error leads to negative array index
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0721
product does not properly track a count and a maximum number, which can lead to resultant array index overflow. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1189
Chain: device driver for packet-capturing software allows access to an unintended IOCTL with resultant array index error. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5756
Chain: array index error (CWE-129) leads to deadlock (CWE-833)
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2456
                       320
CWE-129: Improper Validation of Array Index
CWE Version 4.2
CWE-129: Improper Validation of Array Index
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
  MemberOf Relationships
        Nature
MemberOf MemberOf
MemberOf MemberOf MemberOf MemberOf
MemberOf MemberOf MemberOf
Notes
Relationship
Type ID
738 740
      802
      867
      872
      874
884 1131 1160
Name Page
             CERT C Secure Coding Standard (2008) Chapter 5 - Integers (INT)
CERT C Secure Coding Standard (2008) Chapter 7 - Arrays (ARR)
2010 Top 25 - Risky Resource Management
2011 Top 25 - Weaknesses On the Cusp
CERT C++ Secure Coding Section 04 - Integers (INT) CERT C++ Secure Coding Section 06 - Arrays and the STL (ARR)
CWE Cross-section
CISQ Quality Measures - Security
SEI CERT C Coding Standard - Guidelines 06. Arrays (ARR)
734 1915 734 1917
800 1927 900 1945 868 1947 868 1948
884 2070 1128 2014 1154 2029
                                                                                                             .
Theoretical
An improperly validated array index might lead directly to the always-incorrect behavior of
"access of array using
Taxonomy Mappings
CLASP
PLOVER
CERT C Secure Coding
CERT C Secure Coding CERT C Secure Coding
CERT C Secure Coding
SEI CERT Perl Coding Standard
OMG ASCSM
Related Attack Patterns
out-of-bounds index."
ARR00-
C
ARR30- CWE More Specific C
ARR38-
C
INT32-C
IDS32- Imprecise PL
ASCSM-
CWE-129
Unchecked array indexing INDEX - Array index overflow Understand how arrays work
Do not form or use out-of-bounds pointers or array subscripts
Do not add or subtract an integer to a pointer if the resulting value does not refer to a valid array element
Ensure that operations on signed integers do not result in overflow Validate any integer that is used as an array index
  Mapped Taxonomy Name
    Node ID
    Fit
    Mapped Node Name
                                                                CAPEC-ID
    Attack Pattern Name
  100 Overflow Buffers
References
   321
CWE-129: Improper Validation of Array Index

Abstraction : Base
 
Nature Type ID Name   Page
CWE Version 4.2
CWE-130: Improper Handling of Length Parameter Inconsistency
[REF-7]Michael Howard and David LeBlanc. "Writing Secure Code". 2nd Edition. 2002 December 4. Microsoft Press. < https://www.microsoftpressstore.com/store/writing-secure- code-9780735617223 >.
[REF-96]Jason Lam. "Top 25 Series - Rank 14 - Improper Validation of Array Index". 2010 March 2. SANS Software Security Institute. < http://blogs.sans.org/appsecstreetfighter/2010/03/12/top-25- series-rank-14-improper-validation-of-array-index/ >.
[REF-58]Michael Howard. "Address Space Layout Randomization in Windows Vista". < http:// blogs.msdn.com/michael_howard/archive/2006/05/26/address-space-layout-randomization-in- windows-vista.aspx >.
[REF-60]"PaX". < http://en.wikipedia.org/wiki/PaX >.
[REF-61]Microsoft. "Understanding DEP as a mitigation technology part 1". < http:// blogs.technet.com/b/srd/archive/2009/06/12/understanding-dep-as-a-mitigation-technology- part-1.aspx >.
[REF-76]Sean Barnum and Michael Gegick. "Least Privilege". 2005 September 4. < https:// buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html >.
[REF-44]Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". McGraw-Hill. 2010.
[REF-64]Grant Murphy. "Position Independent Executables (PIE)". 2012 November 8. Red Hat. < https://securityblog.redhat.com/2012/11/28/position-independent-executables-pie/ >.
[REF-962]Object Management Group (OMG). "Automated Source Code Security Measure (ASCSM)". 2016 January. < http://www.omg.org/spec/ASCSM/1.0/ >.