CWE-158: Improper Neutralization of Null Byte or NUL Character
Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.
Extended Description
As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms.
Relationships
 378
CWE-158: Improper Neutralization of Null Byte or NUL Character
CWE Version 4.2
CWE-158: Improper Neutralization of Null Byte or NUL Character
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
  Relevant to the view "Research Concepts" (CWE-1000)
Nature Type ID Name
Page
343
                  ChildOf
Applicable Platforms
138 Improper Neutralization of Special Elements
      Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Scope Impact
Integrity Unexpected State
Potential Mitigations
Likelihood
             Developers should anticipate that null characters or null bytes will be injected/removed/ manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Observed Examples
Reference
CVE-2008-1284 CVE-2005-2008 CVE-2005-3293 CVE-2005-2061
Description
NUL byte in theme name causes directory traversal impact to be worse
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284
Source code disclosure using trailing null.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2008
Source code disclosure using trailing null.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3293
Trailing null allows file include.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2061
                      379
CWE-158: Improper Neutralization of Null Byte or NUL Character

   Reference Description
          CVE-2000-0671 Web server earlier allows allows remote attackers to bypass access restrictions, list directory contents, and read source code by inserting a null
character (%00) in the URL.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0671
           CVE-2002-1025 Application server allows remote attackers to read JSP source code via an encoded null byte in an HTTP GET request, which causes the server to send
the .JSP file unparsed.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1025
      CVE-2003-0768 XSS protection mechanism only checks for sequences with an alphabetical character following a (<), so a non-alphabetical or null character (%00)
following a < may be processed.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0768
          Nature Type ID Name     Page
              Mapped Taxonomy Name
    Node ID
    Fit
    Mapped Node Name
  CWE Version 4.2
CWE-158: Improper Neutralization of Null Byte or NUL Character
  CVE-2002-1774 CVE-2000-0149
CVE-2001-0738
CVE-2001-1140
CVE-2002-1031
Null character in MIME header allows detection bypass.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1774
Web server allows remote attackers to view the source code for CGI programs via a null character (%00) at the end of a URL. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0149
Logging system allows an attacker to cause a denial of service (hang) by causing null bytes to be placed in log messages. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0738
Web server allows source code for executable programs to be read via a null character (%00) at the end of a request. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1140
Protection mechanism for limiting file access can be bypassed using a null character (%00) at the end of the directory name. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1031
Decoding function in proxy allows regular expression bypass in ACLs via URLs with null characters.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0189
Null byte bypasses PHP regexp check (interaction error). https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3153
Null byte bypasses PHP regexp check (interaction error).
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4155
            CVE-2004-0189
CVE-2005-3153 CVE-2005-4155
          MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
MemberOf 990 SFP Secondary Cluster: Tainted Input to Command 888 1985
Notes
Relationship
This can be a factor in multiple interpretation errors, other interaction errors, filename equivalence, etc.
       Taxonomy Mappings
PLOVER
WASC 28 Software Fault Patterns SFP24
Related Attack Patterns
Null Character / Null Byte Null Byte Injection Tainted input to command
                     380
CWE-158: Improper Neutralization of Null Byte or NUL Character

CWE Version 4.2
CWE-159: Improper Handling of Invalid Use of Special Elements
52 Embedding NULL Bytes
53 Postfix, Null Terminate, and Backslash
References
[REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
