CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.
Extended Description
As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
  Weakness ID : 150 Status: Incomplete Structure : Simple
Abstraction : Variant
 Relevant to the view "Research Concepts" (CWE-1000)
  363
CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
      Nature
Type ID Name
Page
                Nature
Scope
Type ID Name
Impact
Page
               Likelihood
      CWE Version 4.2
CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
ChildOf 138 Improper Neutralization of Special Elements 343
Relevant to the view "Architectural Concepts" (CWE-1008)
MemberOf 1019 Validate Inputs 2005
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Integrity Unexpected State
Potential Mitigations
Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Observed Examples
                   364
CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences

  
Reference
CVE-2002-0542
CVE-2000-0703 CVE-2002-0986
CVE-2003-0020 CVE-2003-0083 CVE-2003-0021 CVE-2003-0022 CVE-2003-0023 CVE-2003-0063 CVE-2000-0476 CVE-2001-1556
CWE Version 4.2
CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
Description
The mail program processes special "~" escape sequence even when not in interactive mode.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0542
Setuid program does not filter escape sequences before calling mail program. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703
Mail function does not filter control characters from arguments, allowing mail message content to be modified. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0986
Multi-channel issue. Terminal escape sequences not filtered from log files. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020
Multi-channel issue. Terminal escape sequences not filtered from log files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083
Terminal escape sequences not filtered by terminals when displaying files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0021
Terminal escape sequences not filtered by terminals when displaying files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0022
Terminal escape sequences not filtered by terminals when displaying files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0023
Terminal escape sequences not filtered by terminals when displaying files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0063
Terminal escape sequences not filtered by terminals when displaying files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0476
MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1556
        
                                  MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature
MemberOf
MemberOf MemberOf
Type ID
845
990 1134
Name Page
 The CERT Oracle Secure Coding Standard for
Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS)
SFP Secondary Cluster: Tainted Input to Command SEI CERT Oracle Secure Coding Standard for Java - Guidelines 00. Input Validation and Data Sanitization (IDS)
844 1934
888 1985 1133 2015
                                Taxonomy Mappings
PLOVER
Escape, Meta, or Control Character / Sequence
Do not log unsanitized user input
Tainted input to command
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
        The CERT Oracle Secure Coding Standard for Java (2011)
Software Fault Patterns
Related Attack Patterns
IDS03-J
SFP24
            
CAPEC-ID
Attack Pattern Name
41 Using Meta-characters in E-mail Headers to Inject Malicious Payloads 81 Web Logs Tampering
93 Log Injection-Tampering-Forging
          