CWE-191: Integer Underflow (Wrap or Wraparound)
Description
The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.
Extended Description
This can happen in signed and unsigned cases.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
Nature Type ID Name Page
ChildOf 682 Incorrect Calculation 1329
Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)
Applicable Platforms
Language : C (Prevalence = Undetermined) Language : C++ (Prevalence = Undetermined) Language : Java (Prevalence = Undetermined) Language : C# (Prevalence = Undetermined)
Alternate Terms
Integer underflow : "Integer underflow" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue. "Integer underflow" is occasionally used to describe array index errors in which the index is negative.
Availability
DoS: Crash, Exit, or Restart
DoS: Resource Consumption (CPU) DoS: Resource Consumption (Memory) DoS: Instability
This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.
Integrity Modify Memory
If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.
Confidentiality Availability Access Control
Execute Unauthorized Code or Commands Bypass Protection Mechanism
This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.
Observed Examples
Reference
CVE-2004-0816 CVE-2004-1002 CVE-2005-0199 CVE-2005-1891
Description
Integer underflow in firewall via malformed packet.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0816
Integer underflow by packet with invalid length.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1002
Long input causes incorrect length calculation.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0199
Malformed icon causes integer underflow in loop counter variable.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1891
              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature
MemberOf MemberOf MemberOf
MemberOf
Notes
Research Gap
Under-studied.
Taxonomy Mappings
Type ID
884 998 1137
1158
Name
CWE Cross-section
SFP Secondary Cluster: Glitch in Computation
SEI CERT Oracle Secure Coding Standard for Java -
Guidelines 03. Numeric Types and Operations (NUM)
SEI CERT C Coding Standard - Guidelines 04. Integers 1154 2028 (INT)
Page
 884 2070 888 1991 1133 2017
                                             
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Software Fault Patterns CERT C Secure Coding
CERT C Secure Coding
References
SFP1
INT30-C Imprecise
INT32-C Imprecise
Integer underflow (wrap or wraparound) Glitch in computation
Ensure that unsigned integer operations do not wrap
Ensure that operations on signed integers do not result in overflow
                            [REF-44]Michael Howard, David LeBlanc and John Viega. "24 Deadly Sins of Software Security". McGraw-Hill. 2010.