CWE-138: Improper Neutralization of Special Elements
Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.
Extended Description
Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < ("less than") as meaning "read input from a file".
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
   Weakness ID : 138 Status: Draft Structure : Simple
Abstraction : Class
 Relevant to the view "Research Concepts" (CWE-1000)
 
Nature
ChildOf ParentOf ParentOf ParentOf ParentOf
Type ID
      707
      140
      147
      148
      149
Name
Improper Neutralization Improper Neutralization Improper Neutralization Improper Neutralization Improper Neutralization
Page
1365 of Delimiters 346 of Input Terminators 358 of Input Leaders 360 of Quoting Syntax 362
                                                   343
CWE-138: Improper Neutralization of Special Elements
     Nature Type ID Name   Page
                Nature Type ID Name   Page
             Scope Impact   Likelihood
        Confidentiality Integrity Availability Other
Execute Unauthorized Code or Commands Alter Execution Logic
DoS: Crash, Exit, or Restart
   CWE Version 4.2
CWE-138: Improper Neutralization of Special Elements
   ParentOf
ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf ParentOf
150 Improper Neutralization of Escape, Meta, or Control 363 Sequences
151 Improper Neutralization of Comment Delimiters 366 152 Improper Neutralization of Macro Symbols 367 153 Improper Neutralization of Substitution Characters 369 154 Improper Neutralization of Variable Name Delimiters 371 155 Improper Neutralization of Wildcards or Matching Symbols 373 156 Improper Neutralization of Whitespace 374 157 Failure to Sanitize Paired Delimiters 376 158 Improper Neutralization of Null Byte or NUL Character 378 159 Improper Handling of Invalid Use of Special Elements 381 160 Improper Neutralization of Leading Special Elements 382 162 Improper Neutralization of Trailing Special Elements 386 164 Improper Neutralization of Internal Special Elements 389 464 Addition of Data Structure Sentinel 989 790 Improper Filtering of Special Elements 1480
                                                                                                                                                               Relevant to the view "Architectural Concepts" (CWE-1008)
MemberOf 1019 Validate Inputs 2005
Weakness Ordinalities
Primary :
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Potential Mitigations
Phase: Implementation
Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for
        344
CWE-138: Improper Neutralization of Special Elements

CWE Version 4.2
CWE-138: Improper Neutralization of Special Elements
malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Use and specify an appropriate output encoding to ensure that the special elements are well- defined. A normal byte sequence in one encoding could be a special element in another.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
  
Observed Examples
Reference
CVE-2001-0677
CVE-2000-0703
CVE-2003-0020 CVE-2003-0083
Description
Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0677
Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703
Multi-channel issue. Terminal escape sequences not filtered from log files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020
Multi-channel issue. Terminal escape sequences not filtered from log files.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083
              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
Nature Type ID Name Page
MemberOf 990 SFP Secondary Cluster: Tainted Input to Command 888 1985
Notes
Relationship
This weakness can be related to interpretation conflicts or interaction errors in intermediaries (such as proxies or application firewalls) when the intermediary's model of an endpoint does not account for protocol-specific special elements.
Relationship
See this entry's children for different types of special elements that have been observed at one point or another. However, it can be difficult to find suitable CVE examples. In an attempt to be complete, CWE includes some types that do not have any associated observed example.
Research Gap
This weakness is probably under-studied for proprietary or custom formats. It is likely that these issues are fairly common in applications that use their own custom format for configuration files, logs, meta-data, messaging, etc. They would only be found by accident or with a focused effort based on an understanding of the format.
  Taxonomy Mappings
PLOVER
PLOVER
Software Fault Patterns
Related Attack Patterns
SFP24
Special Elements (Characters or Reserved Words)
Custom Special Character Injection Tainted input to command
                    15 Command Delimiters