CWE-188: Reliance on Data/Memory Layout
Description
The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.
Extended Description
When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.
In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may
             436
CWE-188: Reliance on Data/Memory Layout
CWE Version 4.2
CWE-188: Reliance on Data/Memory Layout
add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
  
 
Nature
ChildOf
ChildOf
ParentOf
Type ID
435
1105
198
Name Page
Improper Interaction Between Multiple Correctly-Behaving 945 Entities
Insufficient Encapsulation of Machine-Dependent 1707 Functionality
Use of Incorrect Byte Ordering 466
                            Relevant to the view "Software Development" (CWE-699)
Nature Type ID Name Page
 
 MemberOf
Applicable Platforms
137 Data Neutralization Issues 1883
     Language : C (Prevalence = Undetermined)
Language : C++ (Prevalence = Undetermined) Likelihood Of Exploit
Low
Common Consequences
Potential Mitigations
Phase: Implementation
Phase: Architecture and Design
In flat address space situations, never allow computing memory addresses as offsets from another memory address.
Phase: Architecture and Design
Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).
Phase: Testing
Testing: Test that the implementation properly handles each case in the protocol grammar.
Demonstrative Examples
Example 1:
In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b.
Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries.
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
MemberOf 977 SFP Secondary Cluster: Design 888 1979
Taxonomy Mappings
CLASP Reliance on data layout
References
[REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
