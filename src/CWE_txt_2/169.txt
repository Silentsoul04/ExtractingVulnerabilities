CWE-168: Improper Handling of Inconsistent Special Elements
Description
The software does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.
Extended Description
An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
  Weakness ID : 168 Status: Draft Structure : Simple
Abstraction : Base
  
Nature
ChildOf ChildOf
Type ID
703 159
Name Page
Improper Check or Handling of Exceptional Conditions 1358 Improper Handling of Invalid Use of Special Elements 381
                 Relevant to the view "Software Development" (CWE-699)
Nature Type ID Name Page
MemberOf 19 Data Processing Errors 1882
 
       395
CWE-168: Improper Handling of Inconsistent Special Elements
Scope Impact   Likelihood
Availability Access Control Non-Repudiation
DoS: Crash, Exit, or Restart Bypass Protection Mechanism Hide Activities
Nature Type ID Name     Page
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
  Weakness ID : 170 Status: Incomplete Structure : Simple
Abstraction : Base
 CWE Version 4.2
CWE-170: Improper Null Termination
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Potential Mitigations
Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
MemberOf 992 SFP Secondary Cluster: Faulty Input Transformation 888 1988
         Taxonomy Mappings
PLOVER