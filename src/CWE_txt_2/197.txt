CWE-197: Numeric Truncation Error
Description
Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.
Extended Description
When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data.
In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
   Weakness ID : 197 Status: Incomplete Structure : Simple
Abstraction : Base
  
Nature
ChildOf CanAlsoBe CanAlsoBe CanAlsoBe CanAlsoBe
Type ID
      681
      192
      194
      195
      196
Name Page
Incorrect Conversion between Numeric Types 1325 Integer Coercion Error 447 Unexpected Sign Extension 455 Signed to Unsigned Conversion Error 458 Unsigned to Signed Conversion Error 461
                                                  Relevant to the view "Software Development" (CWE-699)
Nature Type ID Name Page
 
 MemberOf
Applicable Platforms
Language : C (Prevalence = Undetermined) Language : C++ (Prevalence = Undetermined) Language : Java (Prevalence = Undetermined)

Language : C# (Prevalence = Undetermined) Likelihood Of Exploit
Low
Common Consequences
Potential Mitigations
Phase: Implementation
Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.
  Demonstrative Examples
Example 1:
This example, while not exploitable, shows the possible mangling of values associated with truncation errors:
This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits.
Example 2:
In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the
total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments.
However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented.
The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method.
Observed Examples
Reference
CVE-2009-0231 CVE-2008-3282
Description
Integer truncation of length value leads to heap-based buffer overflow.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0231
Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3282
      MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature
MemberOf MemberOf
MemberOf MemberOf MemberOf
MemberOf
Type ID
738 848
872 998 1137
1158
Name Page
 CERT C Secure Coding Standard (2008) Chapter 5 - Integers (INT)
The CERT Oracle Secure Coding Standard for Java (2011) Chapter 5 - Numeric Types and Operations (NUM)
CERT C++ Secure Coding Section 04 - Integers (INT) SFP Secondary Cluster: Glitch in Computation
SEI CERT Oracle Secure Coding Standard for Java - Guidelines 03. Numeric Types and Operations (NUM) SEI CERT C Coding Standard - Guidelines 04. Integers (INT)
734 1915 844 1936
868 1947 888 1991 1133 2017
1154 2028
                                                                        465
CWE-197: Numeric Truncation Error
Nature Type ID Name     Page
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
Abstraction : Base
 
Nature Type ID Name   Page
CWE Version 4.2
CWE-198: Use of Incorrect Byte Ordering
   MemberOf MemberOf
Notes
Research Gap
1159 SEI CERT C Coding Standard - Guidelines 05. Floating Point (FLP)
1163 SEI CERT C Coding Standard - Guidelines 09. Input Output (FIO)
1154 2028 1154 2031
                   This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009.
Taxonomy Mappings
PLOVER
CLASP
CERT C Secure Coding
CERT C Secure Coding
CERT C Secure Coding CERT C Secure Coding
CERT C Secure Coding
The CERT Oracle Secure Coding Standard for Java (2011)
Software Fault Patterns
References
FIO34-C CWE More Abstract
FLP34-C CWE More Abstract
INT02-C INT05-C
INT31-C CWE More Abstract
NUM12-J
SFP1
Numeric truncation error
Truncation error
Distinguish between characters read from a file and EOF or WEOF
Ensure that floating point conversions are within range of the new type Understand integer conversion rules Do not use input functions to convert character data if they cannot handle all possible inputs
Ensure that integer conversions do not result in lost or misinterpreted data Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data
Glitch in computation
                                                                    [REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
