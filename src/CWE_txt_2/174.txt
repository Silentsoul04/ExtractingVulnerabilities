CWE-174: Double Decoding of the Same Data
Description
The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
CWE Version 4.2
CWE-174: Double Decoding of the Same Data
  
 
Nature
ChildOf ChildOf
Type ID
172 675
Name Page
Encoding Error 401 Duplicate Operations on Resource 1319
                 Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Potential Mitigations
Phase: Architecture and Design
Strategy = Input Validation
Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
Scope Impact   Likelihood
Access Control Confidentiality Availability Integrity
Other
Bypass Protection Mechanism
Execute Unauthorized Code or Commands Varies by Context
 405
CWE-174: Double Decoding of the Same Data
Reference Description
CVE-2004-1315 Forum software improperly URL decodes the highlight parameter when extracting text to highlight, which allows remote attackers to execute arbitrary
PHP code by double-encoding the highlight value so that special characters are inserted into the result. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1315
CVE-2005-0054 Browser executes HTML at higher privileges via URL with hostnames that are double hex encoded, which are decoded twice to generate a malicious
hostname.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0054
Nature Type ID Name     Page
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
CWE Version 4.2
CWE-174: Double Decoding of the Same Data
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
  Observed Examples
CVE-2004-1939
CVE-2001-0333 CVE-2004-1938 CVE-2005-1945
XSS protection mechanism attempts to remove "/" that could be used to close tags, but it can be bypassed using double encoded slashes (%252F) https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1939
Directory traversal using double encoding. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0333
"%2527" (double-encoded single quote) used in SQL injection.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1938
Double hex-encoded data.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1945
            MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 MemberOf 884 MemberOf 992
Notes
Research Gap
Probably under-studied.
Taxonomy Mappings
PLOVER
CWE Cross-section
SFP Secondary Cluster: Faulty Input Transformation
884 2070 888 1988
                   Double Encoding