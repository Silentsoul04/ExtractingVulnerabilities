CWE-152: Improper Neutralization of Macro Symbols
Description
 367
CWE-152: Improper Neutralization of Macro Symbols
       Nature Type ID Name Page
Scope Impact Likelihood
                    CWE Version 4.2
CWE-152: Improper Neutralization of Macro Symbols
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 138 Improper Neutralization of Special Elements 343
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Integrity Unexpected State
Potential Mitigations
Phase: Implementation
Strategy = Input Validation
Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
Use and specify an output encoding that can be handled by the downstream component that
is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either
by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
             368
CWE-152: Improper Neutralization of Macro Symbols

Phase: Implementation
Strategy = Input Validation
Observed Examples
Reference
CVE-2002-0770
CVE-2008-2018
Description
Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0770
Attacker can obtain sensitive information from a database by using a comment containing a macro, which inserts the data during expansion. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2018
CWE Version 4.2
CWE-153: Improper Neutralization of Substitution Characters
  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
      MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 Nature Type ID
Name Page
SFP Secondary Cluster: Tainted Input to Command 888 1985
 MemberOf
Notes
Research Gap
Under-studied.
Taxonomy Mappings
990
      
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Software Fault Patterns
SFP24
Macro Symbol
Tainted input to command
             