CWE-182: Collapse of Data into Unsafe Value
Description
The software filters data in a way that causes it to be reduced or "collapsed" into an unsafe value that violates an expected security property.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
  
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
            
CAPEC-ID
Attack Pattern Name
        
                     Weakness ID : 182 Status: Draft Structure : Simple
Abstraction : Base
 Relevant to the view "Research Concepts" (CWE-1000)
 
Nature
ChildOf CanFollow CanPrecede CanPrecede CanPrecede
Type ID
      693
      185
      33
      34
      35
Name
Protection Mechanism Failure Incorrect Regular Expression Path Traversal: '....' (Multiple Dot) Path Traversal: '....//'
Path Traversal: '.../...//'
Page
1347
430
64
66
68
Page
1882
                                                  Relevant to the view "Software Development" (CWE-699)
Nature Type ID Name
 
 MemberOf
Applicable Platforms
19 Data Processing Errors
     Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Scope Impact
Access Control Bypass Protection Mechanism
Potential Mitigations
Phase: Architecture and Design
Likelihood
   Strategy = Input Validation
 423
CWE-182: Collapse of Data into Unsafe Value
    Reference Description
          CVE-2002-0784 chain: HTTP server protects against ".." but allows "." variants such as "////./../.../". If the server removes "/.." sequences, the result would collapse into
an unsafe value "////../" (CWE-182).
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0784
          Nature Type ID Name     Page
            CWE Version 4.2
CWE-182: Collapse of Data into Unsafe Value
Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).
  Observed Examples
CVE-2004-0815 CVE-2005-3123 CVE-2002-0325
CVE-2005-2169
CVE-2001-1157
"/.////" in pathname collapses to absolute path.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0815
"/.//..//////././" is collapsed into "/.././" after ".." and "//" sequences are removed.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3123
".../...//" collapsed to "..." due to removal of "./" in web server.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0325
MFV. Regular expression intended to protect against directory traversal reduces ".../...//" to "../". https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2169
XSS protection mechanism strips a <script> sequence that is nested in another <script> sequence.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1157
              MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
MemberOf 722 OWASP Top Ten 2004 Category A1 - Unvalidated Input 711 1907
        424
CWE-182: Collapse of Data into Unsafe Value

  
 Nature
MemberOf
MemberOf MemberOf
Notes
Relationship
Type ID
845
992 1134
CWE Version 4.2
CWE-183: Permissive List of Allowed Inputs
Name Page
 The CERT Oracle Secure Coding Standard for
Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS)
SFP Secondary Cluster: Faulty Input Transformation SEI CERT Oracle Secure Coding Standard for Java - Guidelines 00. Input Validation and Data Sanitization (IDS)
844 1934
888 1988 1133 2015
                          
      Overlaps regular expressions, although an implementation might not necessarily use regexp's.
Taxonomy Mappings
PLOVER
The CERT Oracle Secure Coding Standard for Java (2011)
References
Collapse of Data into Unsafe Value IDS11-J Eliminate noncharacter code points
before validation
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
            [REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
