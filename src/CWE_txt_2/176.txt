CWE-176: Improper Handling of Unicode Encoding
Description
The software does not properly handle when an input contains Unicode encoding.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
ChildOf 172 Encoding Error 401
Applicable Platforms
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Integrity Unexpected State
Potential Mitigations
Phase: Architecture and Design
Strategy = Input Validation
           408
CWE-176: Improper Handling of Unicode Encoding
CWE Version 4.2
CWE-176: Improper Handling of Unicode Encoding
Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Demonstrative Examples
Example 1:
Windows provides the MultiByteToWideChar(), WideCharToMultiByte(), UnicodeToBytes(), and BytesToUnicode() functions to convert between arbitrary multibyte (usually ANSI) character strings and Unicode (wide character) strings. The size arguments to these functions are specified in different units, (one in bytes, the other in characters) making their use prone to error.
In a multibyte character string, each character occupies a varying number of bytes, and therefore the size of such strings is most easily specified as a total number of bytes. In Unicode, however, characters are always a fixed size, and string lengths are typically given by the number of characters they contain. Mistakenly specifying the wrong units in a size argument can lead to a buffer overflow.
The following function takes a username specified as a multibyte string and a pointer to a structure for user information and populates the structure with information about the specified user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string.
This function incorrectly passes the size of unicodeUser in bytes instead of characters. The call to MultiByteToWideChar() can therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or (UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated.
  
void getUserInfo(char *username, struct _USER_INFO_2 info){
WCHAR unicodeUser[UNLEN+1];
MultiByteToWideChar(CP_ACP, 0, username, -1, unicodeUser, sizeof(unicodeUser)); NetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&info);
}
 409
CWE-176: Improper Handling of Unicode Encoding
Reference Description
CVE-2000-0884 Server allows remote attackers to read documents outside of the web root, and possibly execute arbitrary commands, via malformed URLs that contain
Unicode encoded characters.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0884
Nature Type ID Name     Page
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
CAPEC-ID
Attack Pattern Name
  Weakness ID : 177 Status: Draft Structure : Simple
Abstraction : Variant
 CWE Version 4.2
If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser.
  Observed Examples
CVE-2001-0709
CVE-2001-0669
Server allows a remote attacker to obtain source code of ASP files via a URL encoded with Unicode. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0709
Overlaps interaction error. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0669
      MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
 MemberOf 747
MemberOf 883
MemberOf 992
Taxonomy Mappings
PLOVER
CERT C Secure Coding
Related Attack Patterns
CERT C Secure Coding Standard (2008) Chapter 14 - Miscellaneous (MSC)
CERT C++ Secure Coding Section 49 - Miscellaneous (MSC)
SFP Secondary Cluster: Faulty Input Transformation
734 1923 868 1953 888 1988
                                Unicode Encoding
MSC10- Character Encoding - UTF8 Related
C Issues
            71 Using Unicode Encoding to Bypass Validation Logic
References
[REF-62]Mark Dowd, John McDonald and Justin Schuh. "The Art of Software Security Assessment". 1st Edition. 2006. Addison Wesley.
