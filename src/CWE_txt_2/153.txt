CWE-153: Improper Neutralization of Substitution Characters
Description
The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.
Relationships
The table(s) below shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOr and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that may want to be explored.
Relevant to the view "Research Concepts" (CWE-1000)
Nature Type ID Name Page
  Weakness ID : 153 Status: Draft Structure : Simple
Abstraction : Variant
  
 ChildOf
138 Improper Neutralization of Special Elements 343
     Applicable Platforms
 369
CWE-153: Improper Neutralization of Substitution Characters
    Scope Impact Likelihood
          Reference Description
    CWE Version 4.2
CWE-153: Improper Neutralization of Substitution Characters
Language : Language-Independent (Prevalence = Undetermined) Common Consequences
Integrity Unexpected State
Potential Mitigations
Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.
Phase: Implementation
Strategy = Input Validation
Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use
a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
Phase: Implementation
Strategy = Output Encoding
While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
Phase: Implementation
Strategy = Input Validation
Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.
Observed Examples
CVE-2002-0770 Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure.
https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0770
MemberOf Relationships
This MemberOf relationships table shows additional CWE Catgeories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.
        370
CWE-153: Improper Neutralization of Substitution Characters

  
 Nature Type ID
CWE Version 4.2
CWE-154: Improper Neutralization of Variable Name Delimiters
Name Page
SFP Secondary Cluster: Tainted Input to Command 888 1985
 MemberOf
Notes
Research Gap
Under-studied.
Taxonomy Mappings
990
      
Mapped Taxonomy Name
Node ID
Fit
Mapped Node Name
PLOVER
Software Fault Patterns
SFP24
Substitution Character Tainted input to command
            